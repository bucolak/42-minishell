char **convert_env_to_envp(t_env *env)
// {
//     int j = 0;
//     t_env *tmp;
//     tmp = env;
//     char **envp;
//     envp = malloc(sizeof(char *) * ft_lsttsize(env));
//     while(tmp)
//     {
//         size_t len = strlen(tmp->key) + strlen(tmp->data) + 1;
//         envp[j] = malloc(len);
//         ft_strlcpy(envp[j],tmp->key, ft_strlen(tmp->key));
//         ft_strlcpy(envp[j] + ft_strlen(tmp->key), tmp->data,ft_strlen(tmp->data));
//         if (!envp[j])
//             return NULL;
//         tmp = tmp->next;
//         j++;
//     }
//     envp[j] = NULL;
//     return envp;
// }

// int handle_redirection(char ***ar)
// {
//     int fd;
//     int i;
//     struct stat path_stat;
//     i = 0;
//     while((*ar)[i])
//         {
//             if(ft_strcmp((*ar)[i], ">") == 0)
//             {
//                 if((*ar)[i+1])
//                 {
//                     i++;
//                     if(stat((*ar)[i], &path_stat) != 0)
//                         fd = open((*ar)[i], O_CREAT | O_WRONLY | O_TRUNC, 0644);
//                     else
//                         fd = open((*ar)[i], O_WRONLY | O_TRUNC, 0644);
//                     if (fd < 0)
//                     {
//                         perror("open");
//                         return -1;
//                     }
//                     dup2(fd, 1);
//                     close(fd);
//                     renew_block(ar);
//                     break;
//                 }
//             }
//             i++;
//         }
//         return 0;
// }

// void try_exec_cmd(char **ar, char **envp, char **paths)
// {
//     int i;

//     i = 0;
//     while(paths[i])
//         {
//             char *str = ft_strjoin(paths[i], "/");
//             char *end = ft_strjoin(str, ar[0]);
//             if(access(end, X_OK) == 0)
//             {
//                 execve(end, ar, envp);
//                 free(str);
//                 free(end);
//                 return ;
//             }
//             i++;
//         }
// }

// void check_cmd_sys_call(t_general *pipe_blocs, t_env **env)
// {
//     char *args;
//     char **paths;
//     pid_t pid;
//     char **ar;
//     char **envp;
    
//     envp = convert_env_to_envp(*env);
//     args = getenv("PATH");
//     paths = ft_split(args, ':');
//     pid = fork();
//     ar = ft_split(pipe_blocs->blocs, ' ');
//     if(pid == 0)
//     {
//        if (handle_redirection(&ar) == -1)
//             exit(1);
//         try_exec_cmd(ar, envp, paths);
//     }
//     else
//         waitpid(pid,NULL, 0);
// }


void check_cmd_sys_call(t_general *pipe_blocs, t_env **env)
{
    pid_t pid;
    t_env *tmp;
    t_now *get;
    int j;
    get = malloc(sizeof(t_now));
    pid = fork();
    get->ar = malloc(sizeof(char *));
    tmp = *env;
    get->envp = malloc(sizeof(char *) * ft_lsttsize(*env));
    j = 0;
    while(pipe_blocs->acces_args->args[j])
    {
        get->ar[j] = ft_strdup(pipe_blocs->acces_args->args[j]->str);
        j++;
    }
    get->ar[j] = NULL;
    j = 0;
    while(tmp)
    {
        get->envp[j] = malloc(ft_strlen(tmp->key) + ft_strlen(tmp->data)+ 2);
        ft_strlcpy(get->envp[j],tmp->key, ft_strlen(tmp->key)+1);
        ft_strlcpy(get->envp[j] + ft_strlen(tmp->key), tmp->data,ft_strlen(tmp->data)+1);
        if (!get->envp[j])
            return ;
        tmp = tmp->next;
        j++;
    }
    get->envp[j] = NULL;

    //print_envp(get->envp);
    if(pid == 0)
    {
        handle_output(&get->ar);
        execute_command(get->ar, get->envp);
    }
    else
        waitpid(pid,NULL, 0);
}

HATALIIIIIIIIIIIIII
void handle_output(t_now *get)
{
    int i = 0;
    int fd;
    struct stat path_stat;
    while (get->ar[i])
    {
        if (ft_strcmp(get->ar[i], ">") == 0)
        {
            if (get->ar[i + 1])
            {
                i++;
                if (stat(get->ar[i], &path_stat) != 0)
                    fd = open(get->ar[i], O_CREAT | O_WRONLY | O_TRUNC, 0644);
                else
                    fd = open(get->ar[i], O_WRONLY | O_TRUNC, 0644);
                if (fd < 0)
                    perror("open");
                dup2(fd, 1);
                close(fd);
                renew_block(&get->ar);
                break;
            }
        }
        i++;
    }
}

void execute_command(t_now *get)
{
    int i;
    i = 0;
        char *args = getenv("PATH");
    char **paths = ft_split(args, ':');
        while(paths[i])
        {
            char *str = ft_strjoin(paths[i], "/");
            char *end = ft_strjoin(str, get->ar[0]);
            if(access(end, X_OK) == 0)
            {
                execve(end, get->ar, get->envp);
                free(str);
                free(end);
                return ;
            }
            i++;
        }
}

void check_cmd_sys_call(t_general *pipe_blocs, t_env **env)
{
    pid_t pid;
    t_env *tmp;
    t_now *get;
    int j;
    get = malloc(sizeof(t_now));
    pid = fork();
    get->ar = malloc(sizeof(char *));
    tmp = *env;
    get->envp = malloc(sizeof(char *) * ft_lsttsize(*env));
    j = 0;
    while(pipe_blocs->acces_args->args[j])
    {
        get->ar[j] = ft_strdup(pipe_blocs->acces_args->args[j]->str);
        j++;
    }
    get->ar[j] = NULL;
    j = 0;
    while(tmp)
    {
        get->envp[j] = malloc(ft_strlen(tmp->key) + ft_strlen(tmp->data)+ 2);
        ft_strlcpy(get->envp[j],tmp->key, ft_strlen(tmp->key)+1);
        ft_strlcpy(get->envp[j] + ft_strlen(tmp->key), tmp->data,ft_strlen(tmp->data)+1);
        if (!get->envp[j])
            return ;
        tmp = tmp->next;
        j++;
    }
    get->envp[j] = NULL;

    //print_envp(get->envp);
    if(pid == 0)
    {
        handle_output(get);
        execute_command(get);
    }
    else
        waitpid(pid,NULL, 0);
}

ÇALIŞAN KOD

void handle_output(char ***ar)
{
    int i = 0;
    int fd;
    struct stat path_stat;
    while ((*ar)[i])
    {
        if (ft_strcmp((*ar)[i], ">") == 0)
        {
            if ((*ar)[i + 1])
            {
                i++;
                if (stat((*ar)[i], &path_stat) != 0)
                    fd = open((*ar)[i], O_CREAT | O_WRONLY | O_TRUNC, 0644);
                else
                    fd = open((*ar)[i], O_WRONLY | O_TRUNC, 0644);
                if (fd < 0)
                {
                    perror("open");
                    exit(EXIT_FAILURE);
                }
                dup2(fd, 1);
                close(fd);
                renew_block(ar);
                break;
            }
        }
        i++;
    }
}

void execute_command(char **ar, char **envp)
{
    int i;
    i = 0;
        char *args = getenv("PATH");
    char **paths = ft_split(args, ':');
        while(paths[i])
        {
            char *str = ft_strjoin(paths[i], "/");
            char *end = ft_strjoin(str, ar[0]);
            if(access(end, X_OK) == 0)
            {
                execve(end, ar, envp);
                free(str);
                free(end);
                return ;
            }
            i++;
        }
}

void check_cmd_sys_call(t_general *pipe_blocs, t_env **env)
{
    pid_t pid;
    t_env *tmp;
    char **ar;
    char **envp;
    int j;
    
    pid = fork();
    ar = malloc(sizeof(char **));
    tmp = *env;
    envp = malloc(sizeof(char *) * ft_lsttsize(*env));
    j = 0;
    while(pipe_blocs->acces_args->args[j])
    {
        ar[j] = ft_strdup(pipe_blocs->acces_args->args[j]->str);
        j++;
    }
    ar[j] = NULL;
    j = 0;
    while(tmp)
    {
        size_t len = strlen(tmp->key) + strlen(tmp->data) + 1;
        envp[j] = malloc(len);
        ft_strlcpy(envp[j],tmp->key, ft_strlen(tmp->key));
        ft_strlcpy(envp[j] + ft_strlen(tmp->key), tmp->data,ft_strlen(tmp->data));
        if (!envp[j])
            return ;
        tmp = tmp->next;
        j++;
    }
    envp[j] = NULL;
    if(pid == 0)
    {
        handle_output(&ar);
        execute_command(ar, envp);
    }
    else
        waitpid(pid,NULL, 0);
}
